#lang racket/base
(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      ((error "insufficient funds"))))
(define (new-withdraw)
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          ((error "insufficient funds"))))))
(define (accumulator init)
  (let ((sum init))
    (lambda (n)
      (begin (set! sum (+ sum n)) sum))))
(define (make-monitored f)
  (let ((counter 0))
    (lambda (arg)
      (if (eq? arg 'how-many-calls?)
          counter
          (begin (set! counter (+ counter 1)) (f arg))))))
(define (rand) (random 1 10000))
(define (cesaro-test) (= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
  (define (iter remaining passed)
    (cond ((= remaining 0) (/ passed trials))
          ((experiment) (iter (- remaining 1) (+ passed 1)))
          (else (iter (- remaining 1) passed))))
  (iter trials 0))
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (randx) (+ 2 (* (random) 6)))
(define (randy) (+ 4 (* (random) 6)))
(define (square x) (* x x))
(define (inside-test) (<= (+ (square (- (- (randx) 5))) (square (- (randy) 7))) 9))
(define (area-circle trials) (* (monte-carlo trials inside-test) 36))
