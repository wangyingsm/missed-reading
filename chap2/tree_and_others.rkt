#lang racket
(define (entry tree) (car tree))
(define (left tree) (cadr tree))
(define (right tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
(define (element-of-set? x tree)
  (cond ((null? tree) #f)
        ((not (pair? tree)) (eq? tree x))
        ((eq? (entry tree) x) #t)
        ((< x (entry tree)) (element-of-set? x (left tree)))
        (else (element-of-set? x (right tree)))))
(define (make-record key value) (cons key value))
(define (complex-axis x y) (cons x y))
(define (complex-polar r a) (cons r a))
(define (complex tag param1 param2)
  (cond ((eq? tag 'axis) (cons tag (complex-axis param1 param2)))
        ((eq2 tag 'polar) (cons tag (complex-axis param1 param2)))
        (else (error "not supported tag"))))