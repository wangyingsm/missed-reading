#lang racket
(define (square x) (* x x))
(define (sum-of-squares x y) (+ (square x) (square y)))
(define (abs x)
  (cond ((>= x 0) x)
        (else (- 0 x))
        )
  )
(define (abs-with-if x)
  (if (>= x 0) x
      (- 0 x)))
(define (sum-of-max-2-of-3 x y z)
  (cond ((and (>= x z) (>= y z)) (+ x y))
        ((and (>= x y) (>= z y)) (+ x z))
        ((and (>= y x) (>= z x)) (+ y z))))
(define (sqrt-iter guess x)
  (define (good-enough? guess)
    (< (abs (- x (square guess))) epsilon))
  (define (improve guess)
    (average guess (/ x guess)))
  (if (good-enough? guess)
      guess
      (sqrt-iter (improve guess) x)))

(define (average x y)
  (/ (+ x y) 2.0))
(define epsilon 0.00001)

(define (sqrt x)
  (sqrt-iter 1 x))
(define (trirt-iter guess x)
  (if (tri-good-enough? guess x)
      guess
      (trirt-iter (tri-improve guess x) x)))
(define (tri-improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3.0))
(define (tri-good-enough? guess x)
  (< (abs (- x (* guess guess guess))) epsilon))
(define (trirt x)
  (trirt-iter 1 x))
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1)) (fib (- n 2))))))
(define (cc kind amount)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (>= kind 5)) 0)
        (else (+ (cc kind (- amount (coin-kind kind)))
            (cc (+ kind 1) amount)))))
(define (coin-kind kind)
  (cond ((= kind 0) 50)
        ((= kind 1) 25)
        ((= kind 2) 10)
        ((= kind 3) 5)
        ((= kind 4) 1)))
(define (coin-count amount)
  (cc 0 amount))
(define (pascal-triangle row col)
  (cond ((or (<= row 0) (<= col 0)) 0)
        ((> col row) 0)
        ((and (= row 1) (= col 1)) 1)
        ((+ (pascal-triangle (- row 1) (- col 1)) (pascal-triangle (- row 1) col)))))
(define (sum a b term next)
  (if (> a b)
      0
      (+ (term a) (sum (next a) b term next))))
(define (identity x) x)
(define (next-int x) (+ x 1))
(define (cube x) (* x x x))
(define (plus-4 x) (+ x 4))
(define (f x) (/ 1.0 (* x (+ x 2))))
(define (cal-pi n)
  (* 8 (sum 1 n f (lambda (x) (+ x 4)))))